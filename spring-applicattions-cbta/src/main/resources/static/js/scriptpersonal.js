document.addEventListener('DOMContentLoaded', () => {

    // --- DATOS DE SIMULACIÓN ---
    let personalData = {
        clases: [
            { id: 'calc', nombre: 'Cálculo', grupo: '7X-A', alumnos: [ { id: '1', nombre: 'Ana García', foto: 'https://i.ibb.co/C03gTJP/mujer1.png', email: 'ana.garcia@email.com', telefono: '331-123-4567', parcial1: [ { actividad: 'Tarea 1', calif: 100 }, { actividad: 'Examen', calif: 80 } ], parcial2: [ { actividad: 'Tarea 2', calif: 90 }, { actividad: 'Proyecto', calif: 80 } ], asistencias: [ { fecha: '2025-09-10', estatus: 'asistencia' }, { fecha: '2025-09-12', estatus: 'asistencia' } ] }, { id: '2', nombre: 'Luis Martínez', foto: 'https://i.ibb.co/P9p1nCq/hombre1.png', email: 'luis.martinez@email.com', telefono: '331-234-5678', parcial1: [ { actividad: 'Tarea 1', calif: 70 }, { actividad: 'Examen', calif: 80 } ], parcial2: [ { actividad: 'Tarea 2', calif: 75 }, { actividad: 'Proyecto', calif: 85 } ], asistencias: [ { fecha: '2025-09-10', estatus: 'falta' }, { fecha: '2025-09-12', estatus: 'retardo' } ] }, { id: '3', nombre: 'Sofía Rodríguez', foto: 'https://i.ibb.co/PMgL4g0/mujer2.png', email: 'sofia.r@email.com', telefono: '331-345-6789', parcial1: [ { actividad: 'Tarea 1', calif: 100 }, { actividad: 'Examen', calif: 95 } ], parcial2: [ { actividad: 'Tarea 2', calif: 98 }, { actividad: 'Proyecto', calif: 92 } ], asistencias: [ { fecha: '2025-09-10', estatus: 'asistencia' }, { fecha: '2025-09-12', estatus: 'asistencia' } ] } ], recursos: [ { id: 1, tipo: 'archivo', titulo: 'Formulario de Derivadas.pdf', descripcion: 'PDF con las fórmulas esenciales.' }, { id: 2, tipo: 'tarea', titulo: 'Tarea 3: Límites', descripcion: 'Resolver los ejercicios de la página 45.', fechaEntrega: '2025-09-20' }, { id: 3, tipo: 'enlace', titulo: 'Khan Academy: Derivadas', descripcion: 'https://es.khanacademy.org/math/calculus-1' } ] },
            { id: 'db', nombre: 'Bases de Datos', grupo: '7X-B', alumnos: [ { id: '4', nombre: 'Carlos Sánchez', foto: 'https://i.ibb.co/yQj0D1j/hombre2.png', email: 'carlos.sanchez@email.com', telefono: '341-123-4567', parcial1: [ { actividad: 'Práctica 1', calif: 90 }, { actividad: 'Examen', calif: 85 } ], parcial2: [ { actividad: 'Práctica 2', calif: 95 }, { actividad: 'Proyecto Final', calif: 89 } ], asistencias: [ { fecha: '2025-09-11', estatus: 'asistencia' } ] }, { id: '5', nombre: 'Laura González', foto: 'https://i.ibb.co/V3vBf2W/mujer3.png', email: 'laura.gonzalez@email.com', telefono: '341-234-5678', parcial1: [ { actividad: 'Práctica 1', calif: 100 }, { actividad: 'Examen', calif: 90 } ], parcial2: [ { actividad: 'Práctica 2', calif: 98 }, { actividad: 'Proyecto Final', calif: 100 } ], asistencias: [ { fecha: '2025-09-11', estatus: 'asistencia' }, { fecha: '2025-09-12', estatus: 'falta' } ] }, { id: '6', nombre: 'Lucas Ramón Lopez Navia', foto: 'https://i.ibb.co/615DoWp/user-placeholder.png', email: 'lucas.lopez@email.com', telefono: '341-345-6789', parcial1: [ { actividad: 'Práctica 1', calif: 60 }, { actividad: 'Examen', calif: 50 } ], parcial2: [ { actividad: 'Práctica 2', calif: 70 }, { actividad: 'Proyecto Final', calif: 65 } ], asistencias: [ { fecha: '2025-09-11', estatus: 'asistencia' } ] } ], recursos: [ { id: 4, tipo: 'archivo', titulo: 'Modelo Entidad-Relación.pptx', descripcion: 'Presentación de la última clase.' } ] }
        ]
    };
    let mockAnnouncements = [ { id: 1, title: 'Recordatorio Examen Parcial 2', content: 'El examen del segundo parcial será la próxima semana.', audience: 'Todos', date: 'Hace 2 días' }, { id: 2, title: 'Entrega de Proyecto Final', content: 'La fecha límite es el 15 de Octubre.', audience: '7X-B', date: 'Hace 5 días' } ];
    const personalSchedule = { 'Lunes': [{ time: '07:00 - 09:00', subject: 'Cálculo', group: '7X-A' }], 'Martes': [{ time: '09:00 - 11:00', subject: 'Bases de Datos', group: '7X-B' }], 'Miércoles': [{ time: '07:00 - 09:00', subject: 'Cálculo', group: '7X-A' }], 'Jueves': [{ time: '09:00 - 11:00', subject: 'Bases de Datos', group: '7X-B' }], 'Viernes': [] };
    let activeCharts = {};

    // --- SELECTORES DE ELEMENTOS ---
    const classListContainer = document.getElementById('class-list-container');
    const classDetailsContainer = document.getElementById('class-details-container');
    const scheduleContainer = document.getElementById('personal-schedule-container');
    const announcementsList = document.getElementById('announcements-list');
    const announcementModal = document.getElementById('announcementModal');
    const addAnnouncementBtn = document.getElementById('add-announcement-btn');
    const closeModalBtn = document.getElementById('closeModalBtn');
    const announcementForm = document.getElementById('announcementForm');
    const studentProfileModal = document.getElementById('studentProfileModal');
    const closeProfileModalBtn = document.getElementById('closeProfileModalBtn');

    // --- FUNCIONES AUXILIARES ---
    function calculateAverage(gradesArray) { if (!gradesArray || gradesArray.length === 0) return 0; const total = gradesArray.reduce((sum, item) => sum + Number(item.calif), 0); return Math.round(total / gradesArray.length); }

    // --- FUNCIONES DE RENDERIZADO ---
    function renderGradebookView(clase) {
        let tableHTML = `<div style="overflow-x:auto;"><table class="gradebook-table"><thead><tr><th style="width: 25%;">Nombre del Alumno</th><th>Actividades Parcial 1</th><th style="width: 10%;">Promedio P1</th><th>Actividades Parcial 2</th><th style="width: 10%;">Promedio P2</th><th style="width: 10%;">Calificación Final</th></tr></thead><tbody>`;
        clase.alumnos.forEach(alumno => { const prom1 = calculateAverage(alumno.parcial1); const prom2 = calculateAverage(alumno.parcial2); const finalGrade = Math.round((prom1 + prom2) / 2); tableHTML += `<tr data-student-id="${alumno.id}"><td><a href="#" class="student-name-link" data-student-id="${alumno.id}" data-class-id="${clase.id}">${alumno.nombre}</a></td><td class="gradebook-activities">${alumno.parcial1.map((act, index) => `<div class="activity-item"><span>${act.actividad}</span><input class="grade-input" type="number" min="0" max="100" value="${act.calif}" data-student-id="${alumno.id}" data-class-id="${clase.id}" data-partial="parcial1" data-activity-index="${index}"></div>`).join('')}</td><td class="promedio-cell" data-role="prom1">${prom1}</td><td class="gradebook-activities">${alumno.parcial2.map((act, index) => `<div class="activity-item"><span>${act.actividad}</span><input class="grade-input" type="number" min="0" max="100" value="${act.calif}" data-student-id="${alumno.id}" data-class-id="${clase.id}" data-partial="parcial2" data-activity-index="${index}"></div>`).join('')}</td><td class="promedio-cell" data-role="prom2">${prom2}</td><td class="final-grade-cell" data-role="final">${finalGrade}</td></tr>`; });
        tableHTML += `</tbody></table></div><button class="btn" style="margin-top: 20px;" onclick="alert('Cambios guardados (simulación)')">Guardar Cambios</button>`;
        let chartsHTML = `<div class="charts-container"><div class="chart-card"><h4>Aprobación del Grupo</h4><canvas id="pieChart"></canvas></div><div class="chart-card"><h4>Distribución de Calificaciones</h4><canvas id="barChart"></canvas></div></div>`;
        return tableHTML + chartsHTML;
    }

    function renderAttendanceView(clase) { const today = '2025-09-12'; /*new Date().toISOString().slice(0, 10);*/ let asistenciasHoy = 0, faltasHoy = 0, retardosHoy = 0; clase.alumnos.forEach(alumno => { const todayRecord = alumno.asistencias.find(a => a.fecha === today); if (todayRecord) { if (todayRecord.estatus === 'asistencia') asistenciasHoy++; else if (todayRecord.estatus === 'falta') faltasHoy++; else if (todayRecord.estatus === 'retardo') retardosHoy++; } }); let viewHTML = `<h3>Registro de Asistencia - ${today}</h3><div class="attendance-summary-card"><div class="summary-item"><div class="count asistencia">${asistenciasHoy}</div><div class="label">Asistencias</div></div><div class="summary-item"><div class="count falta">${faltasHoy}</div><div class="label">Faltas</div></div><div class="summary-item"><div class="count retardo">${retardosHoy}</div><div class="label">Retardos</div></div></div><table class="attendance-table"><thead><tr><th>Nombre del Alumno</th><th>Estatus de Hoy</th><th>Resumen Total del Semestre</th></tr></thead><tbody>`; clase.alumnos.forEach(alumno => { const todayRecord = alumno.asistencias.find(a => a.fecha === today); const currentStatus = todayRecord ? todayRecord.estatus : ''; const totalAsistencias = alumno.asistencias.filter(a => a.estatus === 'asistencia').length; const totalFaltas = alumno.asistencias.filter(a => a.estatus === 'falta').length; const totalRetardos = alumno.asistencias.filter(a => a.estatus === 'retardo').length; viewHTML += `<tr data-student-id="${alumno.id}"><td>${alumno.nombre}</td><td class="attendance-status-buttons"><button class="attendance-btn ${currentStatus === 'asistencia' ? 'selected asistencia' : ''}" data-status="asistencia">A</button><button class="attendance-btn ${currentStatus === 'falta' ? 'selected falta' : ''}" data-status="falta">F</button><button class="attendance-btn ${currentStatus === 'retardo' ? 'selected retardo' : ''}" data-status="retardo">R</button></td><td class="attendance-summary-cell"><span class="summary-badge asistencia">${totalAsistencias} A</span><span class="summary-badge falta">${totalFaltas} F</span><span class="summary-badge retardo">${totalRetardos} R</span></td></tr>`; }); viewHTML += `</tbody></table><button class="btn" style="margin-top: 20px;" onclick="alert('Asistencia guardada (simulación)')">Guardar Asistencia</button>`; return viewHTML; }
    
    function renderResourcesView(clase) { let listHTML = ''; if (clase.recursos.length === 0) { listHTML = '<p class="placeholder">Aún no hay recursos para esta clase.</p>'; } else { clase.recursos.forEach(r => { const icon = r.tipo === 'archivo' ? 'description' : r.tipo === 'enlace' ? 'link' : 'assignment'; let meta = r.tipo === 'tarea' ? `<div class="meta"><span class="material-symbols-outlined">event_available</span> Entregar: ${r.fechaEntrega}</div>` : ''; listHTML += `<li class="resource-card"><div class="resource-header"><h5><span class="material-symbols-outlined">${icon}</span> ${r.titulo}</h5><button class="resource-delete-btn" data-id="${r.id}" title="Eliminar"><span class="material-symbols-outlined">delete</span></button></div><p>${r.descripcion}</p>${meta}</li>`; }); } const viewHTML = `<h3>Recursos y Tareas</h3><div class="resources-view-container"><div class="resource-form-card"><h4><span class="material-symbols-outlined">add_box</span> Añadir Nuevo</h4><form id="resource-form"><div class="form-group"><label for="resourceType">Tipo</label><select id="resourceType"><option value="archivo">Archivo</option><option value="enlace">Enlace</option><option value="tarea">Tarea</option></select></div><div class="form-group"><label for="resourceTitle">Título</label><input type="text" id="resourceTitle" required></div><div class="form-group" id="desc-group"><label for="resourceDesc">Descripción / Enlace</label><input type="text" id="resourceDesc" required></div><div class="form-group hidden" id="file-group"><label for="resourceFile">Seleccionar Archivo</label><input type="file" id="resourceFile"><span class="file-name-display" id="file-name-display"></span></div><div class="form-group hidden" id="date-group"><label for="resourceDate">Fecha de Entrega</label><input type="date" id="resourceDate"></div><button type="submit" class="btn">Añadir</button></form></div><div class="resource-list-card"><ul class="resource-list">${listHTML}</ul></div></div>`; return viewHTML; }
    
    function renderClassList() { if (!classListContainer) return; classListContainer.innerHTML = ''; personalData.clases.forEach(clase => { const div = document.createElement('div'); div.className = 'class-item'; div.dataset.classId = clase.id; div.innerHTML = `<strong>${clase.nombre}</strong><br><small>Grupo: ${clase.grupo}</small>`; classListContainer.appendChild(div); }); }
    
    function renderSchedule() { if (!scheduleContainer) return; scheduleContainer.innerHTML = ''; for (const day in personalSchedule) { const dayBlock = document.createElement('div'); dayBlock.className = 'day-block'; let content = `<h3><span>${day}</span></h3>`; if (personalSchedule[day].length > 0) { content += '<ul class="class-list">'; personalSchedule[day].forEach(item => { content += `<li class="class-item-horario"><div class="class-time">${item.time}</div><div class="class-details"><strong>${item.subject}</strong><br><small>Grupo: ${item.group}</small></div></li>`; }); content += '</ul>'; } else { content += `<p>No hay clases programadas.</p>`; } dayBlock.innerHTML = content; scheduleContainer.appendChild(dayBlock); } }
   
    function renderAnnouncements() { if (!announcementsList) return; announcementsList.innerHTML = ''; if (mockAnnouncements.length === 0) { announcementsList.innerHTML = '<p class="placeholder">No hay anuncios publicados.</p>'; return; } mockAnnouncements.forEach(ann => { const card = document.createElement('div'); card.className = 'announcement-card'; card.innerHTML = `<button class="announcement-delete-btn" data-id="${ann.id}" title="Eliminar"><span class="material-symbols-outlined">delete</span></button><h3>${ann.title}</h3><p>${ann.content}</p><div class="announcement-meta"><strong>Dirigido a:</strong> ${ann.audience} | <strong>Publicado:</strong> ${ann.date}</div>`; announcementsList.appendChild(card); }); }
    
    function openStudentProfile(studentId, classId) { const clase = personalData.clases.find(c => c.id === classId); const student = clase.alumnos.find(a => a.id === studentId); if (!student) return; const totalAsistencias = student.asistencias.filter(a=>a.estatus==='asistencia').length; const totalRecords = student.asistencias.length; const porcentaje = totalRecords > 0 ? Math.round(totalAsistencias / totalRecords * 100) : 0; document.getElementById('modalStudentPhoto').src = student.foto; document.getElementById('modalStudentName').textContent = student.nombre; document.getElementById('modalStudentId').textContent = `N° de Control: ${student.id}`; document.getElementById('modalStudentEmail').textContent = student.email; document.getElementById('modalStudentPhone').textContent = student.telefono; document.getElementById('modalStudentAttendance').textContent = `${totalAsistencias} de ${totalRecords} (${porcentaje}%)`; studentProfileModal.classList.add('show'); }

    function renderClassCharts(clase) {
        if (activeCharts.pie) activeCharts.pie.destroy();
        if (activeCharts.bar) activeCharts.bar.destroy();
        let aprobados = 0, reprobados = 0;
        const gradeDistribution = { '90-100': 0, '80-89': 0, '70-79': 0, '<70': 0 };
        const umbralAprobacion = 70;
        clase.alumnos.forEach(alumno => { const prom1 = calculateAverage(alumno.parcial1); const prom2 = calculateAverage(alumno.parcial2); const finalGrade = Math.round((prom1 + prom2) / 2); if (finalGrade >= umbralAprobacion) { aprobados++; } else { reprobados++; } if (finalGrade >= 90) gradeDistribution['90-100']++; else if (finalGrade >= 80) gradeDistribution['80-89']++; else if (finalGrade >= 70) gradeDistribution['70-79']++; else gradeDistribution['<70']++; });
        const ctxPie = document.getElementById('pieChart').getContext('2d');
        activeCharts.pie = new Chart(ctxPie, { type: 'doughnut', data: { labels: ['Aprobados', 'Reprobados'], datasets: [{ data: [aprobados, reprobados], backgroundColor: ['#28a745', '#dc3545'], borderColor: '#fff', borderWidth: 2 }] }, options: { responsive: true, plugins: { legend: { position: 'top' } } } });
        const ctxBar = document.getElementById('barChart').getContext('2d');
        activeCharts.bar = new Chart(ctxBar, { type: 'bar', data: { labels: ['90-100', '80-89', '70-79', 'Menos de 70'], datasets: [{ label: 'N° de Alumnos', data: Object.values(gradeDistribution), backgroundColor: ['#6d28d9', '#8b5cf6', '#a78bfa', '#c4b5fd'] }] }, options: { responsive: true, plugins: { legend: { display: false } }, scales: { y: { beginAtZero: true, ticks: { stepSize: 1 } } } } });
    }

    // --- FUNCIÓN PRINCIPAL DE "MIS CLASES" ---
    function displayClassDetails(classId) {
        const clase = personalData.clases.find(c => c.id === classId);
        if (!clase) return;
        classDetailsContainer.innerHTML = `<h3><span>${clase.nombre} - Grupo ${clase.grupo}</span></h3><div class="view-tabs"><button class="tab-button active" data-view="grades">Calificaciones</button><button class="tab-button" data-view="attendance">Asistencia</button><button class="tab-button" data-view="resources">Recursos y Tareas</button></div><div id="grades-view" class="tab-view active"></div><div id="attendance-view" class="tab-view"></div><div id="resources-view" class="tab-view"></div>`;
        document.getElementById('grades-view').innerHTML = renderGradebookView(clase);
        document.getElementById('attendance-view').innerHTML = renderAttendanceView(clase);
        document.getElementById('resources-view').innerHTML = renderResourcesView(clase);
        renderClassCharts(clase); // Dibujar las gráficas al mostrar los detalles
    }

    // --- MANEJADORES DE EVENTOS ---
    function setupEventListeners() {
        document.querySelectorAll('nav a[data-section], .quick-links a[data-section]').forEach(link => { link.addEventListener('click', e => { e.preventDefault(); const sectionId = link.dataset.section; document.querySelectorAll('.content-section').forEach(sec => sec.classList.remove('active')); document.getElementById(sectionId).classList.add('active'); document.querySelectorAll('nav a').forEach(a => a.classList.remove('active')); document.querySelector(`nav a[data-section="${sectionId}"]`)?.classList.add('active'); }); });
        const logoutBtn = document.getElementById('logoutBtn');
        if(logoutBtn) { logoutBtn.addEventListener('click', e => { e.preventDefault(); window.location.href = 'index.html'; }); }
        classListContainer.addEventListener('click', (e) => { const classItem = e.target.closest('.class-item'); if (classItem) { document.querySelectorAll('.class-item').forEach(i => i.classList.remove('selected')); classItem.classList.add('selected'); displayClassDetails(classItem.dataset.classId); } });
        addAnnouncementBtn.addEventListener('click', () => announcementModal.classList.add('show'));
        closeModalBtn.addEventListener('click', () => announcementModal.classList.remove('show'));
        announcementModal.addEventListener('click', (e) => { if (e.target === announcementModal) announcementModal.classList.remove('show'); });
        announcementForm.addEventListener('submit', (e) => { e.preventDefault(); const newAnn = { id: Date.now(), title: document.getElementById('announcementTitle').value, content: document.getElementById('announcementContent').value, audience: document.getElementById('announcementAudience').value, date: 'Justo ahora' }; mockAnnouncements.unshift(newAnn); renderAnnouncements(); announcementModal.classList.remove('show'); announcementForm.reset(); });
        announcementsList.addEventListener('click', (e) => { const deleteButton = e.target.closest('.announcement-delete-btn'); if (deleteButton) { const idToDelete = parseInt(deleteButton.dataset.id); if (confirm('¿Estás seguro de que quieres eliminar este anuncio?')) { mockAnnouncements = mockAnnouncements.filter(ann => ann.id !== idToDelete); renderAnnouncements(); } } });
        closeProfileModalBtn.addEventListener('click', () => studentProfileModal.classList.remove('show'));
        studentProfileModal.addEventListener('click', (e) => { if (e.target === studentProfileModal) studentProfileModal.classList.remove('show'); });
        classDetailsContainer.addEventListener('click', (e) => { const target = e.target; if (target.classList.contains('student-name-link')) { e.preventDefault(); openStudentProfile(target.dataset.studentId, target.dataset.classId); } if (target.classList.contains('attendance-btn')) { const button = target; const studentId = button.closest('tr').dataset.studentId; const classId = document.querySelector('.class-item.selected').dataset.classId; const newStatus = button.dataset.status; const today = '2025-09-12'; const clase = personalData.clases.find(c => c.id === classId); const student = clase.alumnos.find(a => a.id === studentId); let todayRecord = student.asistencias.find(a => a.fecha === today); if (todayRecord) { todayRecord.estatus = newStatus; } else { student.asistencias.push({ fecha: today, estatus: newStatus }); } document.getElementById('attendance-view').innerHTML = renderAttendanceView(clase); } if (target.closest('.resource-delete-btn')) { const resourceId = parseInt(target.closest('.resource-delete-btn').dataset.id); const classId = document.querySelector('.class-item.selected').dataset.classId; const clase = personalData.clases.find(c => c.id === classId); clase.recursos = clase.recursos.filter(r => r.id !== resourceId); document.getElementById('resources-view').innerHTML = renderResourcesView(clase); } if (target.classList.contains('tab-button')) { const button = target; classDetailsContainer.querySelectorAll('.tab-button').forEach(btn => btn.classList.remove('active')); classDetailsContainer.querySelectorAll('.tab-view').forEach(view => view.classList.remove('active')); button.classList.add('active'); document.getElementById(`${button.dataset.view}-view`).classList.add('active'); } });
        classDetailsContainer.addEventListener('input', (e) => { if (e.target.classList.contains('grade-input')) { const input = e.target; let newGrade = parseInt(input.value) || 0; if (newGrade > 100) { newGrade = 100; input.value = 100; } if (newGrade < 0) { newGrade = 0; input.value = 0; } const classId = input.dataset.classId; const studentId = input.dataset.studentId; const partial = input.dataset.partial; const activityIndex = parseInt(input.dataset.activityIndex); const clase = personalData.clases.find(c => c.id === classId); const student = clase.alumnos.find(a => a.id === studentId); student[partial][activityIndex].calif = newGrade; const prom1 = calculateAverage(student.parcial1); const prom2 = calculateAverage(student.parcial2); const finalGrade = Math.round((prom1 + prom2) / 2); const studentRow = input.closest('tr'); const prom1Cell = studentRow.querySelector('[data-role="prom1"]'); const prom2Cell = studentRow.querySelector('[data-role="prom2"]'); const finalCell = studentRow.querySelector('[data-role="final"]'); prom1Cell.textContent = prom1; prom2Cell.textContent = prom2; finalCell.textContent = finalGrade; prom1Cell.classList.add('updated'); prom2Cell.classList.add('updated'); finalCell.classList.add('updated'); setTimeout(() => { prom1Cell.classList.remove('updated'); prom2Cell.classList.remove('updated'); finalCell.classList.remove('updated'); }, 800); renderClassCharts(clase); } });
        classDetailsContainer.addEventListener('change', (e) => { if (e.target.id === 'resourceType') { const type = e.target.value; const descGroup = document.getElementById('desc-group'); const fileGroup = document.getElementById('file-group'); const dateGroup = document.getElementById('date-group'); descGroup.classList.remove('hidden'); fileGroup.classList.add('hidden'); dateGroup.classList.add('hidden'); if (type === 'archivo') { descGroup.querySelector('label').textContent = 'Descripción (opcional)'; fileGroup.classList.remove('hidden'); } else if (type === 'enlace') { descGroup.querySelector('label').textContent = 'URL del Enlace'; } else if (type === 'tarea') { descGroup.querySelector('label').textContent = 'Instrucciones'; dateGroup.classList.remove('hidden'); } } if (e.target.id === 'resourceFile') { const fileNameDisplay = document.getElementById('file-name-display'); if (e.target.files.length > 0) { fileNameDisplay.textContent = `Archivo: ${e.target.files[0].name}`; } else { fileNameDisplay.textContent = ''; } } });
        classDetailsContainer.addEventListener('submit', (e) => { if (e.target.id === 'resource-form') { e.preventDefault(); const classId = document.querySelector('.class-item.selected').dataset.classId; const clase = personalData.clases.find(c => c.id === classId); const type = document.getElementById('resourceType').value; const title = document.getElementById('resourceTitle').value; const description = document.getElementById('resourceDesc').value; const newResource = { id: Date.now(), tipo: type, titulo: title, descripcion: description }; if (type === 'archivo') { const fileInput = document.getElementById('resourceFile'); if (fileInput.files.length > 0) { newResource.descripcion = `${description} (Archivo: ${fileInput.files[0].name})`; } } else if (type === 'tarea') { newResource.fechaEntrega = document.getElementById('resourceDate').value; } clase.recursos.unshift(newResource); document.getElementById('resources-view').innerHTML = renderResourcesView(clase); e.target.reset(); document.getElementById('file-name-display').textContent = ''; } });
    }
    
    // --- INICIALIZACIÓN ---
    renderClassList();
    renderSchedule();
    renderAnnouncements();
    setupEventListeners();
});
